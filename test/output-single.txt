[{'end': 2, 'start': 1, 'type': 'unknown'},
 {'end': 3, 'start': 3, 'type': 'whitespace'},
 {'end': 5, 'start': 4, 'type': 'comment'},
 {'end': 6, 'start': 6, 'type': 'whitespace'},
 {'end': 10, 'start': 7, 'type': 'unknown'},
 {'end': 11, 'start': 11, 'type': 'comment'},
 {'end': 12, 'start': 12, 'type': 'unknown'},
 {'end': 13, 'start': 13, 'type': 'whitespace'},
 {'end': 20, 'start': 14, 'type': 'unknown'},
 {'end': 22, 'start': 21, 'type': 'whitespace'},
 {'end': 25, 'start': 23, 'type': 'unknown'},
 {'end': 26, 'start': 26, 'type': 'whitespace'},
 {'end': 29, 'start': 27, 'type': 'unknown'},
 {'end': 30, 'start': 30, 'type': 'whitespace'},
 {'end': 33, 'start': 31, 'type': 'unknown'},
 {'end': 34, 'start': 34, 'type': 'whitespace'},
 {'end': 35, 'start': 35, 'type': 'unknown'},
 {'end': 36, 'start': 36, 'type': 'whitespace'},
 {'end': 39, 'start': 37, 'type': 'unknown'},
 {'end': 40, 'start': 40, 'type': 'whitespace'},
 {'end': 45, 'start': 41, 'type': 'unknown'},
 {'end': 46, 'start': 46, 'type': 'whitespace'},
 {'end': 47, 'start': 47, 'type': 'unknown'},
 {'end': 48, 'start': 48, 'type': 'whitespace'},
 {'end': 50, 'start': 49, 'type': 'unknown'},
 {'end': 51, 'start': 51, 'type': 'whitespace'},
 {'end': 54, 'start': 52, 'type': 'unknown'},
 {'end': 55, 'start': 55, 'type': 'whitespace'},
 {'end': 56, 'start': 56, 'type': 'unknown'},
 {'end': 58, 'start': 57, 'type': 'whitespace'},
 {'end': 63, 'start': 59, 'type': 'unknown'},
 {'end': 66, 'start': 64, 'type': 'whitespace'},
 {'end': 70, 'start': 67, 'type': 'comment'},
 {'end': 85, 'start': 83, 'type': 'whitespace'},
 {'end': 94, 'start': 86, 'type': 'comment'},
 {'end': 119, 'start': 117, 'type': 'whitespace'},
 {'end': 125, 'start': 120, 'type': 'comment'},
 {'end': 136, 'start': 133, 'type': 'whitespace'},
 {'end': 150, 'start': 137, 'type': 'comment'},
 {'end': 166, 'start': 165, 'type': 'whitespace'},
 {'end': 179, 'start': 177, 'type': 'whitespace'},
 {'end': 240, 'start': 240, 'type': 'whitespace'},
 {'end': 330, 'start': 325, 'type': 'whitespace'},
 {'end': 335, 'start': 331, 'type': 'comment'},
 {'end': 343, 'start': 343, 'type': 'whitespace'},
 {'end': 350, 'start': 350, 'type': 'whitespace'},
 {'end': 368, 'start': 368, 'type': 'whitespace'},
 {'end': 376, 'start': 376, 'type': 'whitespace'},
 {'end': 409, 'start': 408, 'type': 'whitespace'}]
[{'end': 70, 'start': 1},
 {'end': 94, 'start': 83},
 {'end': 125, 'start': 117},
 {'end': 150, 'start': 133},
 {'end': 166, 'start': 165},
 {'end': 179, 'start': 177},
 {'end': 240, 'start': 240},
 {'end': 336, 'start': 325},
 {'end': 343, 'start': 343},
 {'end': 350, 'start': 350},
 {'end': 368, 'start': 368},
 {'end': 376, 'start': 376},
 {'end': 409, 'start': 408}]
[(4, 5),
 (11, 11),
 (67, 70),
 (86, 94),
 (99, 99),
 (103, 103),
 (107, 107),
 (110, 110),
 (120, 125),
 (137, 150),
 (182, 184),
 (186, 188),
 (190, 190),
 (218, 218),
 (221, 221),
 (225, 225),
 (258, 258),
 (260, 260),
 (263, 263),
 (270, 270),
 (273, 273),
 (286, 287),
 (293, 293),
 (297, 297),
 (300, 300),
 (305, 305),
 (308, 308),
 (331, 335)]
{
    "root": {
        "module": {
            "GmtDateTime": {
                "name": "GmtDateTime",
                "type": "module",
                "func": {
                    "GmtDate": {
                        "name": "GmtDate",
                        "start": 71,
                        "end": 82,
                        "col": null,
                        "return_type": "Date",
                        "visibility": "Public",
                        "source": "                      ) As Date\n    On Error GoTo ErrH\n    \n    Dim diff&: diff = GmtTimeDifference\n    \n    If IsMissing(startngDate) Then startngDate = Now\n    \n    GmtDate = DateAdd(\"s\", -diff, startngDate)\n    \nErrH: Blame \"GmtDate\"\nEnd Function\n\n\n\n'  Returns time difference between\n'    local & GMT time in seconds.\n'\n'  If the  result is negative,\n'    your time zone lags behind GMT zone.\n'\n'  If the  result is positive,\n'    your time zone is ahead.\n'\nPublic Function GmtTimeDifference() As Long\n    Dim tz As TIME_ZONE_INFORMATION, retCode&\n    \n    \n    ' retrieve the time zone information from API\n    retCode = GetTimeZoneInformation(tz)\n    \n    \n    ' convert to seconds\n    GmtTimeDifference = -tz.Bias * 60\n    \n    \n    ' if we are in daylight  saving time, apply the bias.\n    If retCode = TIME_ZONE_ID_DAYLIGHT& Then\n        \n        ' if tz.DaylightDate.wMonth = 0 then the daylight saving time change doesn't occur\n        If tz.DaylightDate.wMonth <> 0 Then GmtTimeDifference _\n            = GmtTimeDifference - tz.DaylightBias * 60\n    End If\n    \nErrH: Blame \"GmtTimeDifference\"\nEnd Function\n\n\n\n'  Returns the time in your local time zone\n'    which corresposponds to GMT time.\n'\n'  param: gmtRefernceDate\n'   Provides the time & date from which to make calculations\n'\nPublic Function GmtDateLocal(gmtRefernceDate As Date) As Date\n    On Error GoTo ErrH\n    \n    GmtDateLocal = DateAdd(\"s\", GmtTimeDifference(), gmtRefernceDate)\n    \nErrH: Blame \"GmtDateLocal\"\nEnd Function\n\n\n\n\n'  Converts internet time format to VB Date.\n'\n'   supported formats:  Rfc822 and Iso8601\n'\n'     Iso8601 is either\n'           1997-07-16T19:20:30+01:00 (25 bytes)\n'        or 1997-07-16T19:20:30Z      (20 bytes)\n'\n'     Rfc822 is\n'           Tue, 23 Sep 2003 13:21:00 -07:00 (32 bytes)\n'        or Tue, 23 Sep 2003 13:21:00 GMT (29 bytes)\n'\n'     The key difference is that Iso8661 time has a latin letter T in position 11\n'\nPublic Function GmtStringToDate(ByVal internetDateStr As String _\n                              ) As Date\n    On Error GoTo ErrH\n    \n    internetDateStr = Trim$(internetDateStr)\n    \n    If Mid$(DateString, 11, 1) = \"T\" Then\n        GmtStringToDate = Iso8601TimeToLocalVbTime(internetDateStr)\n    Else\n        GmtStringToDate = Rfc822TimeToLocalVbTime(internetDateStr)\n    End If\n    \nErrH: Blame \"GmtStringToDate\"\nEnd Function\n\n\nPublic Function GmtFormat(dateObj As Date _\n                        , Optional dateFormt$ = \"ddd, dd mmm yyyy hh:nn:ss\" _\n                        , Optional gmtSuffx$ = \" GMT\" _\n                        ) As String\n    On Error GoTo ErrH\n    \n    GmtFormat = Format$(dateObj, dateFormt) & gmtSuffx\n    \nErrH: Blame \"GmtFormat\"\nEnd Function\n\n\n\nPrivate Function Iso8601TimeToLocalVbTime(ByVal sIso8601 As String) As Date\n\n    'format of the time is similar to this: 1997-07-16T19:20:30+01:00\n    'or                                     1997-07-16T19:20:30Z or 2003-10-09T09:40:46Z\n    'where Z is UTC (aka GMT time)\n    \n    'formatting breakdown\n    '                1012141618202224\n    '       1997-07-16T19:20:30+01:00\n\n    '       1234567891113151719212325\n    \n    Dim sYear As String\n    Dim sMonth As String\n\n    Dim sDay As String\n    Dim sHour As String\n    Dim sMinute As String\n\n    Dim sSecond As String\n    Dim sTimeZone As String\n    Dim dtDateTime As Date\n\n    Dim bSign As Boolean\n    Dim dGMT As Long\n\n    sYear = Left$(sIso8601, 4)\n    sMonth = Mid$(sIso8601, 6, 2)\n    sDay = Mid$(sIso8601, 9, 2)\n    sHour = Mid$(sIso8601, 12, 2)\n    sMinute = Mid$(sIso8601, 15, 2)\n    sSecond = Mid$(sIso8601, 18, 2)\n    sTimeZone = Mid$(sIso8601, 20)\n    \n    dtDateTime = CDate(DateSerial(sYear, sMonth, sDay) & \" \" & _\n                                     TimeSerial(sHour, sMinute, sSecond))\n                                     \n                                         \n    'replace Z with +00:00 for easier processing\n    sTimeZone = Replace(sTimeZone, \"Z\", \"+00:00\", , , vbTextCompare)\n    \n    'get the size\n    bSign = IIf(Left$(sTimeZone, 1) = \"+\", True, False)\n    \n\n    'grab the hour & minutes\n    dGMT = Val(Mid$(sTimeZone, Len(sTimeZone) - 3, 2)) + (CInt(Right$(sTimeZone, 2)) * 100 / 60)\n    \n    If bSign Then\n        dtDateTime = DateAdd(\"H\", -dGMT, dtDateTime)\n    Else\n\n        dtDateTime = DateAdd(\"H\", dGMT, dtDateTime)\n    End If\n    \n    Iso8601TimeToLocalVbTime = GmtDateLocal(dtDateTime)\n    \n    \n    \nEnd Function\n\nPrivate Function Rfc822TimeToLocalVbTime(sRfc822 As String) As Date\n\n    Dim uSystemTime As SYSTEMTIME\n    Dim sWWW As String\n    Dim iHours As Integer\n\n    Dim dGMT As Long\n    Dim sHourDifferential As String\n    Dim dtDateTime As Date\n\n    \n    Dim sSign As String\n    Dim bSign As Boolean\n    Dim sEscapedTime As String\n\n    Dim sTimeZoneString As String\n    Dim iPos As Integer\n    'true = positive\n\n    'false = negative\n    \n    \n    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    sWWW = sRfc822\n    \n    If InStr(1, sWWW, \"GMT\", vbTextCompare) > 0 Then\n        sWWW = Replace(sWWW, \"GMT\", \"+0000\")\n    End If\n\n    'check to make sure that the time zone is included\n\n    If Len(Trim$(sWWW)) = 25 Then\n        'add time zone\n        sWWW = sWWW & \" +0000\"\n    End If\n\n    \n    If (InStr(1, sWWW, \",\") = 0) Then sWWW = \"Thu, \" & sWWW\n    Call InternetTimeToSystemTime(sWWW, uSystemTime, 0&)\n    With uSystemTime\n        dtDateTime = CDate(DateSerial(.wYear, .wMonth, .wDay) & \" \" & _\n                                     TimeSerial(.wHour, .wMinute, .wSecond))\n    End With\n\n    \n    'get the sign from the back end\n    'remove colons, in case the time is 07:00 instead of 0700\n    sEscapedTime = Replace(sWWW, \":\", \"\")\n    \n    sSign = Mid$(sEscapedTime, Len(sEscapedTime) - 4, 1)\n    bSign = IIf(sSign = \"-\", False, True)\n    \n    'grab the hour & minutes\n\n    iPos = InStrRev(sWWW, \" \")\n    If iPos > 0 Then\n        'get rid of the space and the +/- sign\n        sTimeZoneString = Mid$(sWWW, iPos + 2)\n        \n        'escape it\n        sTimeZoneString = Replace(sTimeZoneString, \":\", \"\")\n        sTimeZoneString = Replace(sTimeZoneString, \" \", \"\")\n        \n\n        'at this point we should have the following: 0700\n        dGMT = Val(Left$(sTimeZoneString, 2)) + Val(Right$(sWWW, 2)) * 100 / 60\n        \n        'dGMT = Val(Mid$(sWWW, Len(sWWW) - 3, 2)) + (CInt(Right$(sWWW, 2)) * 100 / 60)\n    Else\n        dGMT = 0\n    End If\n\n        \n        \n    If bSign Then\n        dtDateTime = DateAdd(\"H\", -dGMT, dtDateTime)\n    Else\n        dtDateTime = DateAdd(\"H\", dGMT, dtDateTime)\n    End If\n    \n    Rfc822TimeToLocalVbTime = GmtDateLocal(dtDateTime)\n    \n\nEnd Function\n\n\n\n\n\n\n' = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n'\n'    Error Handlers\n'\n' = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\nPrivate Sub ErrRaise(errorMsg As String _\n                   , Optional errorNumbr As GmtDateTimeErrors = -1 _\n                   , Optional errSource As String _\n                   )\n    Err.Raise errorNumbr, IIf(LenB(errSource) = 0, TypeName(Me), errSource), errorMsg\nEnd Sub\n\nPrivate Sub ErrorIf(errCondition As Boolean _\n                  , errorMsg As String _\n                  , Optional errorNumbr As GmtDateTimeErrors = -1 _\n                  )\n    If errCondition Then ErrRaise errorMsg, errorNumbr\nEnd Sub\n\nPrivate Sub SaveError()\n    With mError\n        If Err Then\n            .HasError = True\n            .Description = Err.Description\n            .Number = Err.Number\n            .Source = Err.Source\n            \n        Else\n            .HasError = False\n            .Description = vbNullString\n            .Number = 0\n            .Source = vbNullString\n        End If\n    End With\n    Err.Clear\nEnd Sub\n\nPrivate Sub Blame(ByVal currntProcedure As String _\n                , Optional ByVal errorDescrption As String _\n                , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                )\n    Call SaveError\n    Call LoadError(currntProcedure, errorDescrption, errorNumbr)\nEnd Sub\n\nPrivate Sub LoadError(ByVal currntProcedure As String _\n                    , Optional ByVal errorDescrption As String _\n                    , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                    )\n    With mError\n        If Not .HasError Then Exit Sub\n            \n        If LenB(errorDescrption) = 0 Then\n            errorDescrption = .Description\n        Else\n            errorDescrption = .Description & vbCrLf & errorDescrption\n        End If\n        \n        currntProcedure = \"GmtDateTime.\" & currntProcedure & \"()\"\n\n        If errorNumbr = -1 Then errorNumbr = .Number\n        \n        Select Case errorNumbr\n            Case NotInitted\n                errorDescrption = \"GmtDateTime not initted.\" & vbCrLf _\n                               & \"Please call GmtDateTime\" _\n                               & \".Init() before \" & currntProcedure & \".\"\n            \n            Case Else\n                errorDescrption = currntProcedure & vbCrLf & errorDescrption\n        End Select\n\n        ErrRaise errorDescrption, errorNumbr, .Source\n            \n    End With\nEnd Sub\n",
                        "scope": "GmtDateTime",
                        "file": "./vb6-toolbox/Dates/GmtDateTime.bas",
                        "hash": "89c763e9e607740d",
                        "ret": [
                            "GmtDate"
                        ],
                        "args": {
                            "startngDate": {
                                "name": "startngDate",
                                "has_default": null,
                                "scope": "GmtDateTime.GmtDate",
                                "optional": true,
                                "as_type": "Variant",
                                "type_hint": null
                            }
                        }
                    },
                    "GmtTimeDifference": {
                        "name": "GmtTimeDifference",
                        "start": 95,
                        "end": 116,
                        "col": null,
                        "return_type": "Long",
                        "visibility": "Public",
                        "source": "    Dim tz As TIME_ZONE_INFORMATION, retCode&\n    \n    \n    ' retrieve the time zone information from API\n    retCode = GetTimeZoneInformation(tz)\n    \n    \n    ' convert to seconds\n    GmtTimeDifference = -tz.Bias * 60\n    \n    \n    ' if we are in daylight  saving time, apply the bias.\n    If retCode = TIME_ZONE_ID_DAYLIGHT& Then\n        \n        ' if tz.DaylightDate.wMonth = 0 then the daylight saving time change doesn't occur\n        If tz.DaylightDate.wMonth <> 0 Then GmtTimeDifference _\n            = GmtTimeDifference - tz.DaylightBias * 60\n    End If\n    \nErrH: Blame \"GmtTimeDifference\"\nEnd Function\n\n\n\n'  Returns the time in your local time zone\n'    which corresposponds to GMT time.\n'\n'  param: gmtRefernceDate\n'   Provides the time & date from which to make calculations\n'\nPublic Function GmtDateLocal(gmtRefernceDate As Date) As Date\n    On Error GoTo ErrH\n    \n    GmtDateLocal = DateAdd(\"s\", GmtTimeDifference(), gmtRefernceDate)\n    \nErrH: Blame \"GmtDateLocal\"\nEnd Function\n\n\n\n\n'  Converts internet time format to VB Date.\n'\n'   supported formats:  Rfc822 and Iso8601\n'\n'     Iso8601 is either\n'           1997-07-16T19:20:30+01:00 (25 bytes)\n'        or 1997-07-16T19:20:30Z      (20 bytes)\n'\n'     Rfc822 is\n'           Tue, 23 Sep 2003 13:21:00 -07:00 (32 bytes)\n'        or Tue, 23 Sep 2003 13:21:00 GMT (29 bytes)\n'\n'     The key difference is that Iso8661 time has a latin letter T in position 11\n'\nPublic Function GmtStringToDate(ByVal internetDateStr As String _\n                              ) As Date\n    On Error GoTo ErrH\n    \n    internetDateStr = Trim$(internetDateStr)\n    \n    If Mid$(DateString, 11, 1) = \"T\" Then\n        GmtStringToDate = Iso8601TimeToLocalVbTime(internetDateStr)\n    Else\n        GmtStringToDate = Rfc822TimeToLocalVbTime(internetDateStr)\n    End If\n    \nErrH: Blame \"GmtStringToDate\"\nEnd Function\n\n\nPublic Function GmtFormat(dateObj As Date _\n                        , Optional dateFormt$ = \"ddd, dd mmm yyyy hh:nn:ss\" _\n                        , Optional gmtSuffx$ = \" GMT\" _\n                        ) As String\n    On Error GoTo ErrH\n    \n    GmtFormat = Format$(dateObj, dateFormt) & gmtSuffx\n    \nErrH: Blame \"GmtFormat\"\nEnd Function\n\n\n\nPrivate Function Iso8601TimeToLocalVbTime(ByVal sIso8601 As String) As Date\n\n    'format of the time is similar to this: 1997-07-16T19:20:30+01:00\n    'or                                     1997-07-16T19:20:30Z or 2003-10-09T09:40:46Z\n    'where Z is UTC (aka GMT time)\n    \n    'formatting breakdown\n    '                1012141618202224\n    '       1997-07-16T19:20:30+01:00\n\n    '       1234567891113151719212325\n    \n    Dim sYear As String\n    Dim sMonth As String\n\n    Dim sDay As String\n    Dim sHour As String\n    Dim sMinute As String\n\n    Dim sSecond As String\n    Dim sTimeZone As String\n    Dim dtDateTime As Date\n\n    Dim bSign As Boolean\n    Dim dGMT As Long\n\n    sYear = Left$(sIso8601, 4)\n    sMonth = Mid$(sIso8601, 6, 2)\n    sDay = Mid$(sIso8601, 9, 2)\n    sHour = Mid$(sIso8601, 12, 2)\n    sMinute = Mid$(sIso8601, 15, 2)\n    sSecond = Mid$(sIso8601, 18, 2)\n    sTimeZone = Mid$(sIso8601, 20)\n    \n    dtDateTime = CDate(DateSerial(sYear, sMonth, sDay) & \" \" & _\n                                     TimeSerial(sHour, sMinute, sSecond))\n                                     \n                                         \n    'replace Z with +00:00 for easier processing\n    sTimeZone = Replace(sTimeZone, \"Z\", \"+00:00\", , , vbTextCompare)\n    \n    'get the size\n    bSign = IIf(Left$(sTimeZone, 1) = \"+\", True, False)\n    \n\n    'grab the hour & minutes\n    dGMT = Val(Mid$(sTimeZone, Len(sTimeZone) - 3, 2)) + (CInt(Right$(sTimeZone, 2)) * 100 / 60)\n    \n    If bSign Then\n        dtDateTime = DateAdd(\"H\", -dGMT, dtDateTime)\n    Else\n\n        dtDateTime = DateAdd(\"H\", dGMT, dtDateTime)\n    End If\n    \n    Iso8601TimeToLocalVbTime = GmtDateLocal(dtDateTime)\n    \n    \n    \nEnd Function\n\nPrivate Function Rfc822TimeToLocalVbTime(sRfc822 As String) As Date\n\n    Dim uSystemTime As SYSTEMTIME\n    Dim sWWW As String\n    Dim iHours As Integer\n\n    Dim dGMT As Long\n    Dim sHourDifferential As String\n    Dim dtDateTime As Date\n\n    \n    Dim sSign As String\n    Dim bSign As Boolean\n    Dim sEscapedTime As String\n\n    Dim sTimeZoneString As String\n    Dim iPos As Integer\n    'true = positive\n\n    'false = negative\n    \n    \n    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    sWWW = sRfc822\n    \n    If InStr(1, sWWW, \"GMT\", vbTextCompare) > 0 Then\n        sWWW = Replace(sWWW, \"GMT\", \"+0000\")\n    End If\n\n    'check to make sure that the time zone is included\n\n    If Len(Trim$(sWWW)) = 25 Then\n        'add time zone\n        sWWW = sWWW & \" +0000\"\n    End If\n\n    \n    If (InStr(1, sWWW, \",\") = 0) Then sWWW = \"Thu, \" & sWWW\n    Call InternetTimeToSystemTime(sWWW, uSystemTime, 0&)\n    With uSystemTime\n        dtDateTime = CDate(DateSerial(.wYear, .wMonth, .wDay) & \" \" & _\n                                     TimeSerial(.wHour, .wMinute, .wSecond))\n    End With\n\n    \n    'get the sign from the back end\n    'remove colons, in case the time is 07:00 instead of 0700\n    sEscapedTime = Replace(sWWW, \":\", \"\")\n    \n    sSign = Mid$(sEscapedTime, Len(sEscapedTime) - 4, 1)\n    bSign = IIf(sSign = \"-\", False, True)\n    \n    'grab the hour & minutes\n\n    iPos = InStrRev(sWWW, \" \")\n    If iPos > 0 Then\n        'get rid of the space and the +/- sign\n        sTimeZoneString = Mid$(sWWW, iPos + 2)\n        \n        'escape it\n        sTimeZoneString = Replace(sTimeZoneString, \":\", \"\")\n        sTimeZoneString = Replace(sTimeZoneString, \" \", \"\")\n        \n\n        'at this point we should have the following: 0700\n        dGMT = Val(Left$(sTimeZoneString, 2)) + Val(Right$(sWWW, 2)) * 100 / 60\n        \n        'dGMT = Val(Mid$(sWWW, Len(sWWW) - 3, 2)) + (CInt(Right$(sWWW, 2)) * 100 / 60)\n    Else\n        dGMT = 0\n    End If\n\n        \n        \n    If bSign Then\n        dtDateTime = DateAdd(\"H\", -dGMT, dtDateTime)\n    Else\n        dtDateTime = DateAdd(\"H\", dGMT, dtDateTime)\n    End If\n    \n    Rfc822TimeToLocalVbTime = GmtDateLocal(dtDateTime)\n    \n\nEnd Function\n\n\n\n\n\n\n' = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n'\n'    Error Handlers\n'\n' = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\nPrivate Sub ErrRaise(errorMsg As String _\n                   , Optional errorNumbr As GmtDateTimeErrors = -1 _\n                   , Optional errSource As String _\n                   )\n    Err.Raise errorNumbr, IIf(LenB(errSource) = 0, TypeName(Me), errSource), errorMsg\nEnd Sub\n\nPrivate Sub ErrorIf(errCondition As Boolean _\n                  , errorMsg As String _\n                  , Optional errorNumbr As GmtDateTimeErrors = -1 _\n                  )\n    If errCondition Then ErrRaise errorMsg, errorNumbr\nEnd Sub\n\nPrivate Sub SaveError()\n    With mError\n        If Err Then\n            .HasError = True\n            .Description = Err.Description\n            .Number = Err.Number\n            .Source = Err.Source\n            \n        Else\n            .HasError = False\n            .Description = vbNullString\n            .Number = 0\n            .Source = vbNullString\n        End If\n    End With\n    Err.Clear\nEnd Sub\n\nPrivate Sub Blame(ByVal currntProcedure As String _\n                , Optional ByVal errorDescrption As String _\n                , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                )\n    Call SaveError\n    Call LoadError(currntProcedure, errorDescrption, errorNumbr)\nEnd Sub\n\nPrivate Sub LoadError(ByVal currntProcedure As String _\n                    , Optional ByVal errorDescrption As String _\n                    , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                    )\n    With mError\n        If Not .HasError Then Exit Sub\n            \n        If LenB(errorDescrption) = 0 Then\n            errorDescrption = .Description\n        Else\n            errorDescrption = .Description & vbCrLf & errorDescrption\n        End If\n        \n        currntProcedure = \"GmtDateTime.\" & currntProcedure & \"()\"\n\n        If errorNumbr = -1 Then errorNumbr = .Number\n        \n        Select Case errorNumbr\n            Case NotInitted\n                errorDescrption = \"GmtDateTime not initted.\" & vbCrLf _\n                               & \"Please call GmtDateTime\" _\n                               & \".Init() before \" & currntProcedure & \".\"\n            \n            Case Else\n                errorDescrption = currntProcedure & vbCrLf & errorDescrption\n        End Select\n\n        ErrRaise errorDescrption, errorNumbr, .Source\n            \n    End With\nEnd Sub\n",
                        "scope": "GmtDateTime",
                        "file": "./vb6-toolbox/Dates/GmtDateTime.bas",
                        "hash": "89c763e9e607740d",
                        "ret": [
                            "GmtTimeDifference"
                        ]
                    },
                    "GmtDateLocal": {
                        "name": "GmtDateLocal",
                        "start": 126,
                        "end": 132,
                        "col": null,
                        "return_type": "Date",
                        "visibility": "Public",
                        "source": "    On Error GoTo ErrH\n    \n    GmtDateLocal = DateAdd(\"s\", GmtTimeDifference(), gmtRefernceDate)\n    \nErrH: Blame \"GmtDateLocal\"\nEnd Function\n\n\n\n\n'  Converts internet time format to VB Date.\n'\n'   supported formats:  Rfc822 and Iso8601\n'\n'     Iso8601 is either\n'           1997-07-16T19:20:30+01:00 (25 bytes)\n'        or 1997-07-16T19:20:30Z      (20 bytes)\n'\n'     Rfc822 is\n'           Tue, 23 Sep 2003 13:21:00 -07:00 (32 bytes)\n'        or Tue, 23 Sep 2003 13:21:00 GMT (29 bytes)\n'\n'     The key difference is that Iso8661 time has a latin letter T in position 11\n'\nPublic Function GmtStringToDate(ByVal internetDateStr As String _\n                              ) As Date\n    On Error GoTo ErrH\n    \n    internetDateStr = Trim$(internetDateStr)\n    \n    If Mid$(DateString, 11, 1) = \"T\" Then\n        GmtStringToDate = Iso8601TimeToLocalVbTime(internetDateStr)\n    Else\n        GmtStringToDate = Rfc822TimeToLocalVbTime(internetDateStr)\n    End If\n    \nErrH: Blame \"GmtStringToDate\"\nEnd Function\n\n\nPublic Function GmtFormat(dateObj As Date _\n                        , Optional dateFormt$ = \"ddd, dd mmm yyyy hh:nn:ss\" _\n                        , Optional gmtSuffx$ = \" GMT\" _\n                        ) As String\n    On Error GoTo ErrH\n    \n    GmtFormat = Format$(dateObj, dateFormt) & gmtSuffx\n    \nErrH: Blame \"GmtFormat\"\nEnd Function\n\n\n\nPrivate Function Iso8601TimeToLocalVbTime(ByVal sIso8601 As String) As Date\n\n    'format of the time is similar to this: 1997-07-16T19:20:30+01:00\n    'or                                     1997-07-16T19:20:30Z or 2003-10-09T09:40:46Z\n    'where Z is UTC (aka GMT time)\n    \n    'formatting breakdown\n    '                1012141618202224\n    '       1997-07-16T19:20:30+01:00\n\n    '       1234567891113151719212325\n    \n    Dim sYear As String\n    Dim sMonth As String\n\n    Dim sDay As String\n    Dim sHour As String\n    Dim sMinute As String\n\n    Dim sSecond As String\n    Dim sTimeZone As String\n    Dim dtDateTime As Date\n\n    Dim bSign As Boolean\n    Dim dGMT As Long\n\n    sYear = Left$(sIso8601, 4)\n    sMonth = Mid$(sIso8601, 6, 2)\n    sDay = Mid$(sIso8601, 9, 2)\n    sHour = Mid$(sIso8601, 12, 2)\n    sMinute = Mid$(sIso8601, 15, 2)\n    sSecond = Mid$(sIso8601, 18, 2)\n    sTimeZone = Mid$(sIso8601, 20)\n    \n    dtDateTime = CDate(DateSerial(sYear, sMonth, sDay) & \" \" & _\n                                     TimeSerial(sHour, sMinute, sSecond))\n                                     \n                                         \n    'replace Z with +00:00 for easier processing\n    sTimeZone = Replace(sTimeZone, \"Z\", \"+00:00\", , , vbTextCompare)\n    \n    'get the size\n    bSign = IIf(Left$(sTimeZone, 1) = \"+\", True, False)\n    \n\n    'grab the hour & minutes\n    dGMT = Val(Mid$(sTimeZone, Len(sTimeZone) - 3, 2)) + (CInt(Right$(sTimeZone, 2)) * 100 / 60)\n    \n    If bSign Then\n        dtDateTime = DateAdd(\"H\", -dGMT, dtDateTime)\n    Else\n\n        dtDateTime = DateAdd(\"H\", dGMT, dtDateTime)\n    End If\n    \n    Iso8601TimeToLocalVbTime = GmtDateLocal(dtDateTime)\n    \n    \n    \nEnd Function\n\nPrivate Function Rfc822TimeToLocalVbTime(sRfc822 As String) As Date\n\n    Dim uSystemTime As SYSTEMTIME\n    Dim sWWW As String\n    Dim iHours As Integer\n\n    Dim dGMT As Long\n    Dim sHourDifferential As String\n    Dim dtDateTime As Date\n\n    \n    Dim sSign As String\n    Dim bSign As Boolean\n    Dim sEscapedTime As String\n\n    Dim sTimeZoneString As String\n    Dim iPos As Integer\n    'true = positive\n\n    'false = negative\n    \n    \n    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    sWWW = sRfc822\n    \n    If InStr(1, sWWW, \"GMT\", vbTextCompare) > 0 Then\n        sWWW = Replace(sWWW, \"GMT\", \"+0000\")\n    End If\n\n    'check to make sure that the time zone is included\n\n    If Len(Trim$(sWWW)) = 25 Then\n        'add time zone\n        sWWW = sWWW & \" +0000\"\n    End If\n\n    \n    If (InStr(1, sWWW, \",\") = 0) Then sWWW = \"Thu, \" & sWWW\n    Call InternetTimeToSystemTime(sWWW, uSystemTime, 0&)\n    With uSystemTime\n        dtDateTime = CDate(DateSerial(.wYear, .wMonth, .wDay) & \" \" & _\n                                     TimeSerial(.wHour, .wMinute, .wSecond))\n    End With\n\n    \n    'get the sign from the back end\n    'remove colons, in case the time is 07:00 instead of 0700\n    sEscapedTime = Replace(sWWW, \":\", \"\")\n    \n    sSign = Mid$(sEscapedTime, Len(sEscapedTime) - 4, 1)\n    bSign = IIf(sSign = \"-\", False, True)\n    \n    'grab the hour & minutes\n\n    iPos = InStrRev(sWWW, \" \")\n    If iPos > 0 Then\n        'get rid of the space and the +/- sign\n        sTimeZoneString = Mid$(sWWW, iPos + 2)\n        \n        'escape it\n        sTimeZoneString = Replace(sTimeZoneString, \":\", \"\")\n        sTimeZoneString = Replace(sTimeZoneString, \" \", \"\")\n        \n\n        'at this point we should have the following: 0700\n        dGMT = Val(Left$(sTimeZoneString, 2)) + Val(Right$(sWWW, 2)) * 100 / 60\n        \n        'dGMT = Val(Mid$(sWWW, Len(sWWW) - 3, 2)) + (CInt(Right$(sWWW, 2)) * 100 / 60)\n    Else\n        dGMT = 0\n    End If\n\n        \n        \n    If bSign Then\n        dtDateTime = DateAdd(\"H\", -dGMT, dtDateTime)\n    Else\n        dtDateTime = DateAdd(\"H\", dGMT, dtDateTime)\n    End If\n    \n    Rfc822TimeToLocalVbTime = GmtDateLocal(dtDateTime)\n    \n\nEnd Function\n\n\n\n\n\n\n' = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n'\n'    Error Handlers\n'\n' = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\nPrivate Sub ErrRaise(errorMsg As String _\n                   , Optional errorNumbr As GmtDateTimeErrors = -1 _\n                   , Optional errSource As String _\n                   )\n    Err.Raise errorNumbr, IIf(LenB(errSource) = 0, TypeName(Me), errSource), errorMsg\nEnd Sub\n\nPrivate Sub ErrorIf(errCondition As Boolean _\n                  , errorMsg As String _\n                  , Optional errorNumbr As GmtDateTimeErrors = -1 _\n                  )\n    If errCondition Then ErrRaise errorMsg, errorNumbr\nEnd Sub\n\nPrivate Sub SaveError()\n    With mError\n        If Err Then\n            .HasError = True\n            .Description = Err.Description\n            .Number = Err.Number\n            .Source = Err.Source\n            \n        Else\n            .HasError = False\n            .Description = vbNullString\n            .Number = 0\n            .Source = vbNullString\n        End If\n    End With\n    Err.Clear\nEnd Sub\n\nPrivate Sub Blame(ByVal currntProcedure As String _\n                , Optional ByVal errorDescrption As String _\n                , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                )\n    Call SaveError\n    Call LoadError(currntProcedure, errorDescrption, errorNumbr)\nEnd Sub\n\nPrivate Sub LoadError(ByVal currntProcedure As String _\n                    , Optional ByVal errorDescrption As String _\n                    , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                    )\n    With mError\n        If Not .HasError Then Exit Sub\n            \n        If LenB(errorDescrption) = 0 Then\n            errorDescrption = .Description\n        Else\n            errorDescrption = .Description & vbCrLf & errorDescrption\n        End If\n        \n        currntProcedure = \"GmtDateTime.\" & currntProcedure & \"()\"\n\n        If errorNumbr = -1 Then errorNumbr = .Number\n        \n        Select Case errorNumbr\n            Case NotInitted\n                errorDescrption = \"GmtDateTime not initted.\" & vbCrLf _\n                               & \"Please call GmtDateTime\" _\n                               & \".Init() before \" & currntProcedure & \".\"\n            \n            Case Else\n                errorDescrption = currntProcedure & vbCrLf & errorDescrption\n        End Select\n\n        ErrRaise errorDescrption, errorNumbr, .Source\n            \n    End With\nEnd Sub\n",
                        "scope": "GmtDateTime",
                        "file": "./vb6-toolbox/Dates/GmtDateTime.bas",
                        "hash": "89c763e9e607740d",
                        "ret": [
                            "GmtDateLocal"
                        ],
                        "args": {
                            "gmtRefernceDate": {
                                "name": "gmtRefernceDate",
                                "has_default": null,
                                "scope": "GmtDateTime.GmtDateLocal",
                                "optional": null,
                                "as_type": "Date",
                                "type_hint": null
                            }
                        }
                    },
                    "GmtStringToDate": {
                        "name": "GmtStringToDate",
                        "start": 151,
                        "end": 164,
                        "col": null,
                        "return_type": "Date",
                        "visibility": "Public",
                        "source": "                              ) As Date\n    On Error GoTo ErrH\n    \n    internetDateStr = Trim$(internetDateStr)\n    \n    If Mid$(DateString, 11, 1) = \"T\" Then\n        GmtStringToDate = Iso8601TimeToLocalVbTime(internetDateStr)\n    Else\n        GmtStringToDate = Rfc822TimeToLocalVbTime(internetDateStr)\n    End If\n    \nErrH: Blame \"GmtStringToDate\"\nEnd Function\n\n\nPublic Function GmtFormat(dateObj As Date _\n                        , Optional dateFormt$ = \"ddd, dd mmm yyyy hh:nn:ss\" _\n                        , Optional gmtSuffx$ = \" GMT\" _\n                        ) As String\n    On Error GoTo ErrH\n    \n    GmtFormat = Format$(dateObj, dateFormt) & gmtSuffx\n    \nErrH: Blame \"GmtFormat\"\nEnd Function\n\n\n\nPrivate Function Iso8601TimeToLocalVbTime(ByVal sIso8601 As String) As Date\n\n    'format of the time is similar to this: 1997-07-16T19:20:30+01:00\n    'or                                     1997-07-16T19:20:30Z or 2003-10-09T09:40:46Z\n    'where Z is UTC (aka GMT time)\n    \n    'formatting breakdown\n    '                1012141618202224\n    '       1997-07-16T19:20:30+01:00\n\n    '       1234567891113151719212325\n    \n    Dim sYear As String\n    Dim sMonth As String\n\n    Dim sDay As String\n    Dim sHour As String\n    Dim sMinute As String\n\n    Dim sSecond As String\n    Dim sTimeZone As String\n    Dim dtDateTime As Date\n\n    Dim bSign As Boolean\n    Dim dGMT As Long\n\n    sYear = Left$(sIso8601, 4)\n    sMonth = Mid$(sIso8601, 6, 2)\n    sDay = Mid$(sIso8601, 9, 2)\n    sHour = Mid$(sIso8601, 12, 2)\n    sMinute = Mid$(sIso8601, 15, 2)\n    sSecond = Mid$(sIso8601, 18, 2)\n    sTimeZone = Mid$(sIso8601, 20)\n    \n    dtDateTime = CDate(DateSerial(sYear, sMonth, sDay) & \" \" & _\n                                     TimeSerial(sHour, sMinute, sSecond))\n                                     \n                                         \n    'replace Z with +00:00 for easier processing\n    sTimeZone = Replace(sTimeZone, \"Z\", \"+00:00\", , , vbTextCompare)\n    \n    'get the size\n    bSign = IIf(Left$(sTimeZone, 1) = \"+\", True, False)\n    \n\n    'grab the hour & minutes\n    dGMT = Val(Mid$(sTimeZone, Len(sTimeZone) - 3, 2)) + (CInt(Right$(sTimeZone, 2)) * 100 / 60)\n    \n    If bSign Then\n        dtDateTime = DateAdd(\"H\", -dGMT, dtDateTime)\n    Else\n\n        dtDateTime = DateAdd(\"H\", dGMT, dtDateTime)\n    End If\n    \n    Iso8601TimeToLocalVbTime = GmtDateLocal(dtDateTime)\n    \n    \n    \nEnd Function\n\nPrivate Function Rfc822TimeToLocalVbTime(sRfc822 As String) As Date\n\n    Dim uSystemTime As SYSTEMTIME\n    Dim sWWW As String\n    Dim iHours As Integer\n\n    Dim dGMT As Long\n    Dim sHourDifferential As String\n    Dim dtDateTime As Date\n\n    \n    Dim sSign As String\n    Dim bSign As Boolean\n    Dim sEscapedTime As String\n\n    Dim sTimeZoneString As String\n    Dim iPos As Integer\n    'true = positive\n\n    'false = negative\n    \n    \n    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    sWWW = sRfc822\n    \n    If InStr(1, sWWW, \"GMT\", vbTextCompare) > 0 Then\n        sWWW = Replace(sWWW, \"GMT\", \"+0000\")\n    End If\n\n    'check to make sure that the time zone is included\n\n    If Len(Trim$(sWWW)) = 25 Then\n        'add time zone\n        sWWW = sWWW & \" +0000\"\n    End If\n\n    \n    If (InStr(1, sWWW, \",\") = 0) Then sWWW = \"Thu, \" & sWWW\n    Call InternetTimeToSystemTime(sWWW, uSystemTime, 0&)\n    With uSystemTime\n        dtDateTime = CDate(DateSerial(.wYear, .wMonth, .wDay) & \" \" & _\n                                     TimeSerial(.wHour, .wMinute, .wSecond))\n    End With\n\n    \n    'get the sign from the back end\n    'remove colons, in case the time is 07:00 instead of 0700\n    sEscapedTime = Replace(sWWW, \":\", \"\")\n    \n    sSign = Mid$(sEscapedTime, Len(sEscapedTime) - 4, 1)\n    bSign = IIf(sSign = \"-\", False, True)\n    \n    'grab the hour & minutes\n\n    iPos = InStrRev(sWWW, \" \")\n    If iPos > 0 Then\n        'get rid of the space and the +/- sign\n        sTimeZoneString = Mid$(sWWW, iPos + 2)\n        \n        'escape it\n        sTimeZoneString = Replace(sTimeZoneString, \":\", \"\")\n        sTimeZoneString = Replace(sTimeZoneString, \" \", \"\")\n        \n\n        'at this point we should have the following: 0700\n        dGMT = Val(Left$(sTimeZoneString, 2)) + Val(Right$(sWWW, 2)) * 100 / 60\n        \n        'dGMT = Val(Mid$(sWWW, Len(sWWW) - 3, 2)) + (CInt(Right$(sWWW, 2)) * 100 / 60)\n    Else\n        dGMT = 0\n    End If\n\n        \n        \n    If bSign Then\n        dtDateTime = DateAdd(\"H\", -dGMT, dtDateTime)\n    Else\n        dtDateTime = DateAdd(\"H\", dGMT, dtDateTime)\n    End If\n    \n    Rfc822TimeToLocalVbTime = GmtDateLocal(dtDateTime)\n    \n\nEnd Function\n\n\n\n\n\n\n' = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n'\n'    Error Handlers\n'\n' = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\nPrivate Sub ErrRaise(errorMsg As String _\n                   , Optional errorNumbr As GmtDateTimeErrors = -1 _\n                   , Optional errSource As String _\n                   )\n    Err.Raise errorNumbr, IIf(LenB(errSource) = 0, TypeName(Me), errSource), errorMsg\nEnd Sub\n\nPrivate Sub ErrorIf(errCondition As Boolean _\n                  , errorMsg As String _\n                  , Optional errorNumbr As GmtDateTimeErrors = -1 _\n                  )\n    If errCondition Then ErrRaise errorMsg, errorNumbr\nEnd Sub\n\nPrivate Sub SaveError()\n    With mError\n        If Err Then\n            .HasError = True\n            .Description = Err.Description\n            .Number = Err.Number\n            .Source = Err.Source\n            \n        Else\n            .HasError = False\n            .Description = vbNullString\n            .Number = 0\n            .Source = vbNullString\n        End If\n    End With\n    Err.Clear\nEnd Sub\n\nPrivate Sub Blame(ByVal currntProcedure As String _\n                , Optional ByVal errorDescrption As String _\n                , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                )\n    Call SaveError\n    Call LoadError(currntProcedure, errorDescrption, errorNumbr)\nEnd Sub\n\nPrivate Sub LoadError(ByVal currntProcedure As String _\n                    , Optional ByVal errorDescrption As String _\n                    , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                    )\n    With mError\n        If Not .HasError Then Exit Sub\n            \n        If LenB(errorDescrption) = 0 Then\n            errorDescrption = .Description\n        Else\n            errorDescrption = .Description & vbCrLf & errorDescrption\n        End If\n        \n        currntProcedure = \"GmtDateTime.\" & currntProcedure & \"()\"\n\n        If errorNumbr = -1 Then errorNumbr = .Number\n        \n        Select Case errorNumbr\n            Case NotInitted\n                errorDescrption = \"GmtDateTime not initted.\" & vbCrLf _\n                               & \"Please call GmtDateTime\" _\n                               & \".Init() before \" & currntProcedure & \".\"\n            \n            Case Else\n                errorDescrption = currntProcedure & vbCrLf & errorDescrption\n        End Select\n\n        ErrRaise errorDescrption, errorNumbr, .Source\n            \n    End With\nEnd Sub\n",
                        "scope": "GmtDateTime",
                        "file": "./vb6-toolbox/Dates/GmtDateTime.bas",
                        "hash": "89c763e9e607740d",
                        "ret": [
                            "GmtStringToDate"
                        ],
                        "args": {
                            "internetDateStr": {
                                "name": "internetDateStr",
                                "has_default": null,
                                "scope": "GmtDateTime.GmtStringToDate",
                                "optional": null,
                                "as_type": "String",
                                "type_hint": null
                            }
                        }
                    },
                    "GmtFormat": {
                        "name": "GmtFormat",
                        "start": 167,
                        "end": 176,
                        "col": null,
                        "return_type": "String",
                        "visibility": "Public",
                        "source": "                        , Optional dateFormt$ = \"ddd, dd mmm yyyy hh:nn:ss\" _\n                        , Optional gmtSuffx$ = \" GMT\" _\n                        ) As String\n    On Error GoTo ErrH\n    \n    GmtFormat = Format$(dateObj, dateFormt) & gmtSuffx\n    \nErrH: Blame \"GmtFormat\"\nEnd Function\n\n\n\nPrivate Function Iso8601TimeToLocalVbTime(ByVal sIso8601 As String) As Date\n\n    'format of the time is similar to this: 1997-07-16T19:20:30+01:00\n    'or                                     1997-07-16T19:20:30Z or 2003-10-09T09:40:46Z\n    'where Z is UTC (aka GMT time)\n    \n    'formatting breakdown\n    '                1012141618202224\n    '       1997-07-16T19:20:30+01:00\n\n    '       1234567891113151719212325\n    \n    Dim sYear As String\n    Dim sMonth As String\n\n    Dim sDay As String\n    Dim sHour As String\n    Dim sMinute As String\n\n    Dim sSecond As String\n    Dim sTimeZone As String\n    Dim dtDateTime As Date\n\n    Dim bSign As Boolean\n    Dim dGMT As Long\n\n    sYear = Left$(sIso8601, 4)\n    sMonth = Mid$(sIso8601, 6, 2)\n    sDay = Mid$(sIso8601, 9, 2)\n    sHour = Mid$(sIso8601, 12, 2)\n    sMinute = Mid$(sIso8601, 15, 2)\n    sSecond = Mid$(sIso8601, 18, 2)\n    sTimeZone = Mid$(sIso8601, 20)\n    \n    dtDateTime = CDate(DateSerial(sYear, sMonth, sDay) & \" \" & _\n                                     TimeSerial(sHour, sMinute, sSecond))\n                                     \n                                         \n    'replace Z with +00:00 for easier processing\n    sTimeZone = Replace(sTimeZone, \"Z\", \"+00:00\", , , vbTextCompare)\n    \n    'get the size\n    bSign = IIf(Left$(sTimeZone, 1) = \"+\", True, False)\n    \n\n    'grab the hour & minutes\n    dGMT = Val(Mid$(sTimeZone, Len(sTimeZone) - 3, 2)) + (CInt(Right$(sTimeZone, 2)) * 100 / 60)\n    \n    If bSign Then\n        dtDateTime = DateAdd(\"H\", -dGMT, dtDateTime)\n    Else\n\n        dtDateTime = DateAdd(\"H\", dGMT, dtDateTime)\n    End If\n    \n    Iso8601TimeToLocalVbTime = GmtDateLocal(dtDateTime)\n    \n    \n    \nEnd Function\n\nPrivate Function Rfc822TimeToLocalVbTime(sRfc822 As String) As Date\n\n    Dim uSystemTime As SYSTEMTIME\n    Dim sWWW As String\n    Dim iHours As Integer\n\n    Dim dGMT As Long\n    Dim sHourDifferential As String\n    Dim dtDateTime As Date\n\n    \n    Dim sSign As String\n    Dim bSign As Boolean\n    Dim sEscapedTime As String\n\n    Dim sTimeZoneString As String\n    Dim iPos As Integer\n    'true = positive\n\n    'false = negative\n    \n    \n    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    sWWW = sRfc822\n    \n    If InStr(1, sWWW, \"GMT\", vbTextCompare) > 0 Then\n        sWWW = Replace(sWWW, \"GMT\", \"+0000\")\n    End If\n\n    'check to make sure that the time zone is included\n\n    If Len(Trim$(sWWW)) = 25 Then\n        'add time zone\n        sWWW = sWWW & \" +0000\"\n    End If\n\n    \n    If (InStr(1, sWWW, \",\") = 0) Then sWWW = \"Thu, \" & sWWW\n    Call InternetTimeToSystemTime(sWWW, uSystemTime, 0&)\n    With uSystemTime\n        dtDateTime = CDate(DateSerial(.wYear, .wMonth, .wDay) & \" \" & _\n                                     TimeSerial(.wHour, .wMinute, .wSecond))\n    End With\n\n    \n    'get the sign from the back end\n    'remove colons, in case the time is 07:00 instead of 0700\n    sEscapedTime = Replace(sWWW, \":\", \"\")\n    \n    sSign = Mid$(sEscapedTime, Len(sEscapedTime) - 4, 1)\n    bSign = IIf(sSign = \"-\", False, True)\n    \n    'grab the hour & minutes\n\n    iPos = InStrRev(sWWW, \" \")\n    If iPos > 0 Then\n        'get rid of the space and the +/- sign\n        sTimeZoneString = Mid$(sWWW, iPos + 2)\n        \n        'escape it\n        sTimeZoneString = Replace(sTimeZoneString, \":\", \"\")\n        sTimeZoneString = Replace(sTimeZoneString, \" \", \"\")\n        \n\n        'at this point we should have the following: 0700\n        dGMT = Val(Left$(sTimeZoneString, 2)) + Val(Right$(sWWW, 2)) * 100 / 60\n        \n        'dGMT = Val(Mid$(sWWW, Len(sWWW) - 3, 2)) + (CInt(Right$(sWWW, 2)) * 100 / 60)\n    Else\n        dGMT = 0\n    End If\n\n        \n        \n    If bSign Then\n        dtDateTime = DateAdd(\"H\", -dGMT, dtDateTime)\n    Else\n        dtDateTime = DateAdd(\"H\", dGMT, dtDateTime)\n    End If\n    \n    Rfc822TimeToLocalVbTime = GmtDateLocal(dtDateTime)\n    \n\nEnd Function\n\n\n\n\n\n\n' = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n'\n'    Error Handlers\n'\n' = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\nPrivate Sub ErrRaise(errorMsg As String _\n                   , Optional errorNumbr As GmtDateTimeErrors = -1 _\n                   , Optional errSource As String _\n                   )\n    Err.Raise errorNumbr, IIf(LenB(errSource) = 0, TypeName(Me), errSource), errorMsg\nEnd Sub\n\nPrivate Sub ErrorIf(errCondition As Boolean _\n                  , errorMsg As String _\n                  , Optional errorNumbr As GmtDateTimeErrors = -1 _\n                  )\n    If errCondition Then ErrRaise errorMsg, errorNumbr\nEnd Sub\n\nPrivate Sub SaveError()\n    With mError\n        If Err Then\n            .HasError = True\n            .Description = Err.Description\n            .Number = Err.Number\n            .Source = Err.Source\n            \n        Else\n            .HasError = False\n            .Description = vbNullString\n            .Number = 0\n            .Source = vbNullString\n        End If\n    End With\n    Err.Clear\nEnd Sub\n\nPrivate Sub Blame(ByVal currntProcedure As String _\n                , Optional ByVal errorDescrption As String _\n                , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                )\n    Call SaveError\n    Call LoadError(currntProcedure, errorDescrption, errorNumbr)\nEnd Sub\n\nPrivate Sub LoadError(ByVal currntProcedure As String _\n                    , Optional ByVal errorDescrption As String _\n                    , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                    )\n    With mError\n        If Not .HasError Then Exit Sub\n            \n        If LenB(errorDescrption) = 0 Then\n            errorDescrption = .Description\n        Else\n            errorDescrption = .Description & vbCrLf & errorDescrption\n        End If\n        \n        currntProcedure = \"GmtDateTime.\" & currntProcedure & \"()\"\n\n        If errorNumbr = -1 Then errorNumbr = .Number\n        \n        Select Case errorNumbr\n            Case NotInitted\n                errorDescrption = \"GmtDateTime not initted.\" & vbCrLf _\n                               & \"Please call GmtDateTime\" _\n                               & \".Init() before \" & currntProcedure & \".\"\n            \n            Case Else\n                errorDescrption = currntProcedure & vbCrLf & errorDescrption\n        End Select\n\n        ErrRaise errorDescrption, errorNumbr, .Source\n            \n    End With\nEnd Sub\n",
                        "scope": "GmtDateTime",
                        "file": "./vb6-toolbox/Dates/GmtDateTime.bas",
                        "hash": "89c763e9e607740d",
                        "ret": [
                            "GmtFormat"
                        ],
                        "args": {
                            "dateObj": {
                                "name": "dateObj",
                                "has_default": null,
                                "scope": "GmtDateTime.GmtFormat",
                                "optional": null,
                                "as_type": "Date",
                                "type_hint": null
                            },
                            "dateFormt": {
                                "name": "dateFormt",
                                "has_default": true,
                                "scope": "GmtDateTime.GmtFormat",
                                "optional": true,
                                "as_type": null,
                                "type_hint": "$",
                                "default": "\"ddd, dd mmm yyyy hh:nn:ss\""
                            },
                            "gmtSuffx": {
                                "name": "gmtSuffx",
                                "has_default": true,
                                "scope": "GmtDateTime.GmtFormat",
                                "optional": true,
                                "as_type": null,
                                "type_hint": "$",
                                "default": "\" GMT\""
                            }
                        }
                    },
                    "Iso8601TimeToLocalVbTime": {
                        "name": "Iso8601TimeToLocalVbTime",
                        "start": 180,
                        "end": 239,
                        "col": null,
                        "return_type": "Date",
                        "visibility": "Private",
                        "source": "\n    'format of the time is similar to this: 1997-07-16T19:20:30+01:00\n    'or                                     1997-07-16T19:20:30Z or 2003-10-09T09:40:46Z\n    'where Z is UTC (aka GMT time)\n    \n    'formatting breakdown\n    '                1012141618202224\n    '       1997-07-16T19:20:30+01:00\n\n    '       1234567891113151719212325\n    \n    Dim sYear As String\n    Dim sMonth As String\n\n    Dim sDay As String\n    Dim sHour As String\n    Dim sMinute As String\n\n    Dim sSecond As String\n    Dim sTimeZone As String\n    Dim dtDateTime As Date\n\n    Dim bSign As Boolean\n    Dim dGMT As Long\n\n    sYear = Left$(sIso8601, 4)\n    sMonth = Mid$(sIso8601, 6, 2)\n    sDay = Mid$(sIso8601, 9, 2)\n    sHour = Mid$(sIso8601, 12, 2)\n    sMinute = Mid$(sIso8601, 15, 2)\n    sSecond = Mid$(sIso8601, 18, 2)\n    sTimeZone = Mid$(sIso8601, 20)\n    \n    dtDateTime = CDate(DateSerial(sYear, sMonth, sDay) & \" \" & _\n                                     TimeSerial(sHour, sMinute, sSecond))\n                                     \n                                         \n    'replace Z with +00:00 for easier processing\n    sTimeZone = Replace(sTimeZone, \"Z\", \"+00:00\", , , vbTextCompare)\n    \n    'get the size\n    bSign = IIf(Left$(sTimeZone, 1) = \"+\", True, False)\n    \n\n    'grab the hour & minutes\n    dGMT = Val(Mid$(sTimeZone, Len(sTimeZone) - 3, 2)) + (CInt(Right$(sTimeZone, 2)) * 100 / 60)\n    \n    If bSign Then\n        dtDateTime = DateAdd(\"H\", -dGMT, dtDateTime)\n    Else\n\n        dtDateTime = DateAdd(\"H\", dGMT, dtDateTime)\n    End If\n    \n    Iso8601TimeToLocalVbTime = GmtDateLocal(dtDateTime)\n    \n    \n    \nEnd Function\n\nPrivate Function Rfc822TimeToLocalVbTime(sRfc822 As String) As Date\n\n    Dim uSystemTime As SYSTEMTIME\n    Dim sWWW As String\n    Dim iHours As Integer\n\n    Dim dGMT As Long\n    Dim sHourDifferential As String\n    Dim dtDateTime As Date\n\n    \n    Dim sSign As String\n    Dim bSign As Boolean\n    Dim sEscapedTime As String\n\n    Dim sTimeZoneString As String\n    Dim iPos As Integer\n    'true = positive\n\n    'false = negative\n    \n    \n    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    sWWW = sRfc822\n    \n    If InStr(1, sWWW, \"GMT\", vbTextCompare) > 0 Then\n        sWWW = Replace(sWWW, \"GMT\", \"+0000\")\n    End If\n\n    'check to make sure that the time zone is included\n\n    If Len(Trim$(sWWW)) = 25 Then\n        'add time zone\n        sWWW = sWWW & \" +0000\"\n    End If\n\n    \n    If (InStr(1, sWWW, \",\") = 0) Then sWWW = \"Thu, \" & sWWW\n    Call InternetTimeToSystemTime(sWWW, uSystemTime, 0&)\n    With uSystemTime\n        dtDateTime = CDate(DateSerial(.wYear, .wMonth, .wDay) & \" \" & _\n                                     TimeSerial(.wHour, .wMinute, .wSecond))\n    End With\n\n    \n    'get the sign from the back end\n    'remove colons, in case the time is 07:00 instead of 0700\n    sEscapedTime = Replace(sWWW, \":\", \"\")\n    \n    sSign = Mid$(sEscapedTime, Len(sEscapedTime) - 4, 1)\n    bSign = IIf(sSign = \"-\", False, True)\n    \n    'grab the hour & minutes\n\n    iPos = InStrRev(sWWW, \" \")\n    If iPos > 0 Then\n        'get rid of the space and the +/- sign\n        sTimeZoneString = Mid$(sWWW, iPos + 2)\n        \n        'escape it\n        sTimeZoneString = Replace(sTimeZoneString, \":\", \"\")\n        sTimeZoneString = Replace(sTimeZoneString, \" \", \"\")\n        \n\n        'at this point we should have the following: 0700\n        dGMT = Val(Left$(sTimeZoneString, 2)) + Val(Right$(sWWW, 2)) * 100 / 60\n        \n        'dGMT = Val(Mid$(sWWW, Len(sWWW) - 3, 2)) + (CInt(Right$(sWWW, 2)) * 100 / 60)\n    Else\n        dGMT = 0\n    End If\n\n        \n        \n    If bSign Then\n        dtDateTime = DateAdd(\"H\", -dGMT, dtDateTime)\n    Else\n        dtDateTime = DateAdd(\"H\", dGMT, dtDateTime)\n    End If\n    \n    Rfc822TimeToLocalVbTime = GmtDateLocal(dtDateTime)\n    \n\nEnd Function\n\n\n\n\n\n\n' = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n'\n'    Error Handlers\n'\n' = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\nPrivate Sub ErrRaise(errorMsg As String _\n                   , Optional errorNumbr As GmtDateTimeErrors = -1 _\n                   , Optional errSource As String _\n                   )\n    Err.Raise errorNumbr, IIf(LenB(errSource) = 0, TypeName(Me), errSource), errorMsg\nEnd Sub\n\nPrivate Sub ErrorIf(errCondition As Boolean _\n                  , errorMsg As String _\n                  , Optional errorNumbr As GmtDateTimeErrors = -1 _\n                  )\n    If errCondition Then ErrRaise errorMsg, errorNumbr\nEnd Sub\n\nPrivate Sub SaveError()\n    With mError\n        If Err Then\n            .HasError = True\n            .Description = Err.Description\n            .Number = Err.Number\n            .Source = Err.Source\n            \n        Else\n            .HasError = False\n            .Description = vbNullString\n            .Number = 0\n            .Source = vbNullString\n        End If\n    End With\n    Err.Clear\nEnd Sub\n\nPrivate Sub Blame(ByVal currntProcedure As String _\n                , Optional ByVal errorDescrption As String _\n                , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                )\n    Call SaveError\n    Call LoadError(currntProcedure, errorDescrption, errorNumbr)\nEnd Sub\n\nPrivate Sub LoadError(ByVal currntProcedure As String _\n                    , Optional ByVal errorDescrption As String _\n                    , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                    )\n    With mError\n        If Not .HasError Then Exit Sub\n            \n        If LenB(errorDescrption) = 0 Then\n            errorDescrption = .Description\n        Else\n            errorDescrption = .Description & vbCrLf & errorDescrption\n        End If\n        \n        currntProcedure = \"GmtDateTime.\" & currntProcedure & \"()\"\n\n        If errorNumbr = -1 Then errorNumbr = .Number\n        \n        Select Case errorNumbr\n            Case NotInitted\n                errorDescrption = \"GmtDateTime not initted.\" & vbCrLf _\n                               & \"Please call GmtDateTime\" _\n                               & \".Init() before \" & currntProcedure & \".\"\n            \n            Case Else\n                errorDescrption = currntProcedure & vbCrLf & errorDescrption\n        End Select\n\n        ErrRaise errorDescrption, errorNumbr, .Source\n            \n    End With\nEnd Sub\n",
                        "scope": "GmtDateTime",
                        "file": "./vb6-toolbox/Dates/GmtDateTime.bas",
                        "hash": "89c763e9e607740d",
                        "ret": [
                            "Iso8601TimeToLocalVbTime"
                        ],
                        "args": {
                            "sIso8601": {
                                "name": "sIso8601",
                                "has_default": null,
                                "scope": "GmtDateTime.Iso8601TimeToLocalVbTime",
                                "optional": null,
                                "as_type": "String",
                                "type_hint": null
                            }
                        }
                    },
                    "Rfc822TimeToLocalVbTime": {
                        "name": "Rfc822TimeToLocalVbTime",
                        "start": 241,
                        "end": 324,
                        "col": null,
                        "return_type": "Date",
                        "visibility": "Private",
                        "source": "\n    Dim uSystemTime As SYSTEMTIME\n    Dim sWWW As String\n    Dim iHours As Integer\n\n    Dim dGMT As Long\n    Dim sHourDifferential As String\n    Dim dtDateTime As Date\n\n    \n    Dim sSign As String\n    Dim bSign As Boolean\n    Dim sEscapedTime As String\n\n    Dim sTimeZoneString As String\n    Dim iPos As Integer\n    'true = positive\n\n    'false = negative\n    \n    \n    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    sWWW = sRfc822\n    \n    If InStr(1, sWWW, \"GMT\", vbTextCompare) > 0 Then\n        sWWW = Replace(sWWW, \"GMT\", \"+0000\")\n    End If\n\n    'check to make sure that the time zone is included\n\n    If Len(Trim$(sWWW)) = 25 Then\n        'add time zone\n        sWWW = sWWW & \" +0000\"\n    End If\n\n    \n    If (InStr(1, sWWW, \",\") = 0) Then sWWW = \"Thu, \" & sWWW\n    Call InternetTimeToSystemTime(sWWW, uSystemTime, 0&)\n    With uSystemTime\n        dtDateTime = CDate(DateSerial(.wYear, .wMonth, .wDay) & \" \" & _\n                                     TimeSerial(.wHour, .wMinute, .wSecond))\n    End With\n\n    \n    'get the sign from the back end\n    'remove colons, in case the time is 07:00 instead of 0700\n    sEscapedTime = Replace(sWWW, \":\", \"\")\n    \n    sSign = Mid$(sEscapedTime, Len(sEscapedTime) - 4, 1)\n    bSign = IIf(sSign = \"-\", False, True)\n    \n    'grab the hour & minutes\n\n    iPos = InStrRev(sWWW, \" \")\n    If iPos > 0 Then\n        'get rid of the space and the +/- sign\n        sTimeZoneString = Mid$(sWWW, iPos + 2)\n        \n        'escape it\n        sTimeZoneString = Replace(sTimeZoneString, \":\", \"\")\n        sTimeZoneString = Replace(sTimeZoneString, \" \", \"\")\n        \n\n        'at this point we should have the following: 0700\n        dGMT = Val(Left$(sTimeZoneString, 2)) + Val(Right$(sWWW, 2)) * 100 / 60\n        \n        'dGMT = Val(Mid$(sWWW, Len(sWWW) - 3, 2)) + (CInt(Right$(sWWW, 2)) * 100 / 60)\n    Else\n        dGMT = 0\n    End If\n\n        \n        \n    If bSign Then\n        dtDateTime = DateAdd(\"H\", -dGMT, dtDateTime)\n    Else\n        dtDateTime = DateAdd(\"H\", dGMT, dtDateTime)\n    End If\n    \n    Rfc822TimeToLocalVbTime = GmtDateLocal(dtDateTime)\n    \n\nEnd Function\n\n\n\n\n\n\n' = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n'\n'    Error Handlers\n'\n' = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\nPrivate Sub ErrRaise(errorMsg As String _\n                   , Optional errorNumbr As GmtDateTimeErrors = -1 _\n                   , Optional errSource As String _\n                   )\n    Err.Raise errorNumbr, IIf(LenB(errSource) = 0, TypeName(Me), errSource), errorMsg\nEnd Sub\n\nPrivate Sub ErrorIf(errCondition As Boolean _\n                  , errorMsg As String _\n                  , Optional errorNumbr As GmtDateTimeErrors = -1 _\n                  )\n    If errCondition Then ErrRaise errorMsg, errorNumbr\nEnd Sub\n\nPrivate Sub SaveError()\n    With mError\n        If Err Then\n            .HasError = True\n            .Description = Err.Description\n            .Number = Err.Number\n            .Source = Err.Source\n            \n        Else\n            .HasError = False\n            .Description = vbNullString\n            .Number = 0\n            .Source = vbNullString\n        End If\n    End With\n    Err.Clear\nEnd Sub\n\nPrivate Sub Blame(ByVal currntProcedure As String _\n                , Optional ByVal errorDescrption As String _\n                , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                )\n    Call SaveError\n    Call LoadError(currntProcedure, errorDescrption, errorNumbr)\nEnd Sub\n\nPrivate Sub LoadError(ByVal currntProcedure As String _\n                    , Optional ByVal errorDescrption As String _\n                    , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                    )\n    With mError\n        If Not .HasError Then Exit Sub\n            \n        If LenB(errorDescrption) = 0 Then\n            errorDescrption = .Description\n        Else\n            errorDescrption = .Description & vbCrLf & errorDescrption\n        End If\n        \n        currntProcedure = \"GmtDateTime.\" & currntProcedure & \"()\"\n\n        If errorNumbr = -1 Then errorNumbr = .Number\n        \n        Select Case errorNumbr\n            Case NotInitted\n                errorDescrption = \"GmtDateTime not initted.\" & vbCrLf _\n                               & \"Please call GmtDateTime\" _\n                               & \".Init() before \" & currntProcedure & \".\"\n            \n            Case Else\n                errorDescrption = currntProcedure & vbCrLf & errorDescrption\n        End Select\n\n        ErrRaise errorDescrption, errorNumbr, .Source\n            \n    End With\nEnd Sub\n",
                        "scope": "GmtDateTime",
                        "file": "./vb6-toolbox/Dates/GmtDateTime.bas",
                        "hash": "89c763e9e607740d",
                        "ret": [
                            "Rfc822TimeToLocalVbTime"
                        ],
                        "args": {
                            "sRfc822": {
                                "name": "sRfc822",
                                "has_default": null,
                                "scope": "GmtDateTime.Rfc822TimeToLocalVbTime",
                                "optional": null,
                                "as_type": "String",
                                "type_hint": null
                            }
                        }
                    }
                },
                "sub": {
                    "ErrRaise": {
                        "name": "ErrRaise",
                        "start": 337,
                        "end": 342,
                        "col": null,
                        "visibility": "Private",
                        "source": "                   , Optional errorNumbr As GmtDateTimeErrors = -1 _\n                   , Optional errSource As String _\n                   )\n    Err.Raise errorNumbr, IIf(LenB(errSource) = 0, TypeName(Me), errSource), errorMsg\nEnd Sub\n\nPrivate Sub ErrorIf(errCondition As Boolean _\n                  , errorMsg As String _\n                  , Optional errorNumbr As GmtDateTimeErrors = -1 _\n                  )\n    If errCondition Then ErrRaise errorMsg, errorNumbr\nEnd Sub\n\nPrivate Sub SaveError()\n    With mError\n        If Err Then\n            .HasError = True\n            .Description = Err.Description\n            .Number = Err.Number\n            .Source = Err.Source\n            \n        Else\n            .HasError = False\n            .Description = vbNullString\n            .Number = 0\n            .Source = vbNullString\n        End If\n    End With\n    Err.Clear\nEnd Sub\n\nPrivate Sub Blame(ByVal currntProcedure As String _\n                , Optional ByVal errorDescrption As String _\n                , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                )\n    Call SaveError\n    Call LoadError(currntProcedure, errorDescrption, errorNumbr)\nEnd Sub\n\nPrivate Sub LoadError(ByVal currntProcedure As String _\n                    , Optional ByVal errorDescrption As String _\n                    , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                    )\n    With mError\n        If Not .HasError Then Exit Sub\n            \n        If LenB(errorDescrption) = 0 Then\n            errorDescrption = .Description\n        Else\n            errorDescrption = .Description & vbCrLf & errorDescrption\n        End If\n        \n        currntProcedure = \"GmtDateTime.\" & currntProcedure & \"()\"\n\n        If errorNumbr = -1 Then errorNumbr = .Number\n        \n        Select Case errorNumbr\n            Case NotInitted\n                errorDescrption = \"GmtDateTime not initted.\" & vbCrLf _\n                               & \"Please call GmtDateTime\" _\n                               & \".Init() before \" & currntProcedure & \".\"\n            \n            Case Else\n                errorDescrption = currntProcedure & vbCrLf & errorDescrption\n        End Select\n\n        ErrRaise errorDescrption, errorNumbr, .Source\n            \n    End With\nEnd Sub\n",
                        "scope": "GmtDateTime",
                        "file": "./vb6-toolbox/Dates/GmtDateTime.bas",
                        "hash": "89c763e9e607740d",
                        "args": {
                            "errorMsg": {
                                "name": "errorMsg",
                                "has_default": null,
                                "scope": "GmtDateTime.ErrRaise",
                                "optional": null,
                                "as_type": "String",
                                "type_hint": null
                            },
                            "errorNumbr": {
                                "name": "errorNumbr",
                                "has_default": true,
                                "scope": "GmtDateTime.ErrRaise",
                                "optional": true,
                                "as_type": "GmtDateTimeErrors",
                                "type_hint": null,
                                "default": "-1"
                            },
                            "errSource": {
                                "name": "errSource",
                                "has_default": null,
                                "scope": "GmtDateTime.ErrRaise",
                                "optional": true,
                                "as_type": "String",
                                "type_hint": null
                            }
                        }
                    },
                    "ErrorIf": {
                        "name": "ErrorIf",
                        "start": 344,
                        "end": 349,
                        "col": null,
                        "visibility": "Private",
                        "source": "                  , errorMsg As String _\n                  , Optional errorNumbr As GmtDateTimeErrors = -1 _\n                  )\n    If errCondition Then ErrRaise errorMsg, errorNumbr\nEnd Sub\n\nPrivate Sub SaveError()\n    With mError\n        If Err Then\n            .HasError = True\n            .Description = Err.Description\n            .Number = Err.Number\n            .Source = Err.Source\n            \n        Else\n            .HasError = False\n            .Description = vbNullString\n            .Number = 0\n            .Source = vbNullString\n        End If\n    End With\n    Err.Clear\nEnd Sub\n\nPrivate Sub Blame(ByVal currntProcedure As String _\n                , Optional ByVal errorDescrption As String _\n                , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                )\n    Call SaveError\n    Call LoadError(currntProcedure, errorDescrption, errorNumbr)\nEnd Sub\n\nPrivate Sub LoadError(ByVal currntProcedure As String _\n                    , Optional ByVal errorDescrption As String _\n                    , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                    )\n    With mError\n        If Not .HasError Then Exit Sub\n            \n        If LenB(errorDescrption) = 0 Then\n            errorDescrption = .Description\n        Else\n            errorDescrption = .Description & vbCrLf & errorDescrption\n        End If\n        \n        currntProcedure = \"GmtDateTime.\" & currntProcedure & \"()\"\n\n        If errorNumbr = -1 Then errorNumbr = .Number\n        \n        Select Case errorNumbr\n            Case NotInitted\n                errorDescrption = \"GmtDateTime not initted.\" & vbCrLf _\n                               & \"Please call GmtDateTime\" _\n                               & \".Init() before \" & currntProcedure & \".\"\n            \n            Case Else\n                errorDescrption = currntProcedure & vbCrLf & errorDescrption\n        End Select\n\n        ErrRaise errorDescrption, errorNumbr, .Source\n            \n    End With\nEnd Sub\n",
                        "scope": "GmtDateTime",
                        "file": "./vb6-toolbox/Dates/GmtDateTime.bas",
                        "hash": "89c763e9e607740d",
                        "args": {
                            "errCondition": {
                                "name": "errCondition",
                                "has_default": null,
                                "scope": "GmtDateTime.ErrorIf",
                                "optional": null,
                                "as_type": "Boolean",
                                "type_hint": null
                            },
                            "errorMsg": {
                                "name": "errorMsg",
                                "has_default": null,
                                "scope": "GmtDateTime.ErrorIf",
                                "optional": null,
                                "as_type": "String",
                                "type_hint": null
                            },
                            "errorNumbr": {
                                "name": "errorNumbr",
                                "has_default": true,
                                "scope": "GmtDateTime.ErrorIf",
                                "optional": true,
                                "as_type": "GmtDateTimeErrors",
                                "type_hint": null,
                                "default": "-1"
                            }
                        }
                    },
                    "SaveError": {
                        "name": "SaveError",
                        "start": 351,
                        "end": 367,
                        "col": null,
                        "visibility": "Private",
                        "source": "    With mError\n        If Err Then\n            .HasError = True\n            .Description = Err.Description\n            .Number = Err.Number\n            .Source = Err.Source\n            \n        Else\n            .HasError = False\n            .Description = vbNullString\n            .Number = 0\n            .Source = vbNullString\n        End If\n    End With\n    Err.Clear\nEnd Sub\n\nPrivate Sub Blame(ByVal currntProcedure As String _\n                , Optional ByVal errorDescrption As String _\n                , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                )\n    Call SaveError\n    Call LoadError(currntProcedure, errorDescrption, errorNumbr)\nEnd Sub\n\nPrivate Sub LoadError(ByVal currntProcedure As String _\n                    , Optional ByVal errorDescrption As String _\n                    , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                    )\n    With mError\n        If Not .HasError Then Exit Sub\n            \n        If LenB(errorDescrption) = 0 Then\n            errorDescrption = .Description\n        Else\n            errorDescrption = .Description & vbCrLf & errorDescrption\n        End If\n        \n        currntProcedure = \"GmtDateTime.\" & currntProcedure & \"()\"\n\n        If errorNumbr = -1 Then errorNumbr = .Number\n        \n        Select Case errorNumbr\n            Case NotInitted\n                errorDescrption = \"GmtDateTime not initted.\" & vbCrLf _\n                               & \"Please call GmtDateTime\" _\n                               & \".Init() before \" & currntProcedure & \".\"\n            \n            Case Else\n                errorDescrption = currntProcedure & vbCrLf & errorDescrption\n        End Select\n\n        ErrRaise errorDescrption, errorNumbr, .Source\n            \n    End With\nEnd Sub\n",
                        "scope": "GmtDateTime",
                        "file": "./vb6-toolbox/Dates/GmtDateTime.bas",
                        "hash": "89c763e9e607740d"
                    },
                    "Blame": {
                        "name": "Blame",
                        "start": 369,
                        "end": 375,
                        "col": null,
                        "visibility": "Private",
                        "source": "                , Optional ByVal errorDescrption As String _\n                , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                )\n    Call SaveError\n    Call LoadError(currntProcedure, errorDescrption, errorNumbr)\nEnd Sub\n\nPrivate Sub LoadError(ByVal currntProcedure As String _\n                    , Optional ByVal errorDescrption As String _\n                    , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                    )\n    With mError\n        If Not .HasError Then Exit Sub\n            \n        If LenB(errorDescrption) = 0 Then\n            errorDescrption = .Description\n        Else\n            errorDescrption = .Description & vbCrLf & errorDescrption\n        End If\n        \n        currntProcedure = \"GmtDateTime.\" & currntProcedure & \"()\"\n\n        If errorNumbr = -1 Then errorNumbr = .Number\n        \n        Select Case errorNumbr\n            Case NotInitted\n                errorDescrption = \"GmtDateTime not initted.\" & vbCrLf _\n                               & \"Please call GmtDateTime\" _\n                               & \".Init() before \" & currntProcedure & \".\"\n            \n            Case Else\n                errorDescrption = currntProcedure & vbCrLf & errorDescrption\n        End Select\n\n        ErrRaise errorDescrption, errorNumbr, .Source\n            \n    End With\nEnd Sub\n",
                        "scope": "GmtDateTime",
                        "file": "./vb6-toolbox/Dates/GmtDateTime.bas",
                        "hash": "89c763e9e607740d",
                        "args": {
                            "currntProcedure": {
                                "name": "currntProcedure",
                                "has_default": null,
                                "scope": "GmtDateTime.Blame",
                                "optional": null,
                                "as_type": "String",
                                "type_hint": null
                            },
                            "errorDescrption": {
                                "name": "errorDescrption",
                                "has_default": null,
                                "scope": "GmtDateTime.Blame",
                                "optional": true,
                                "as_type": "String",
                                "type_hint": null
                            },
                            "errorNumbr": {
                                "name": "errorNumbr",
                                "has_default": true,
                                "scope": "GmtDateTime.Blame",
                                "optional": true,
                                "as_type": "GmtDateTimeErrors",
                                "type_hint": null,
                                "default": "-1"
                            }
                        }
                    },
                    "LoadError": {
                        "name": "LoadError",
                        "start": 377,
                        "end": 407,
                        "col": null,
                        "visibility": "Private",
                        "source": "                    , Optional ByVal errorDescrption As String _\n                    , Optional ByVal errorNumbr As GmtDateTimeErrors = -1 _\n                    )\n    With mError\n        If Not .HasError Then Exit Sub\n            \n        If LenB(errorDescrption) = 0 Then\n            errorDescrption = .Description\n        Else\n            errorDescrption = .Description & vbCrLf & errorDescrption\n        End If\n        \n        currntProcedure = \"GmtDateTime.\" & currntProcedure & \"()\"\n\n        If errorNumbr = -1 Then errorNumbr = .Number\n        \n        Select Case errorNumbr\n            Case NotInitted\n                errorDescrption = \"GmtDateTime not initted.\" & vbCrLf _\n                               & \"Please call GmtDateTime\" _\n                               & \".Init() before \" & currntProcedure & \".\"\n            \n            Case Else\n                errorDescrption = currntProcedure & vbCrLf & errorDescrption\n        End Select\n\n        ErrRaise errorDescrption, errorNumbr, .Source\n            \n    End With\nEnd Sub\n",
                        "scope": "GmtDateTime",
                        "file": "./vb6-toolbox/Dates/GmtDateTime.bas",
                        "hash": "89c763e9e607740d",
                        "args": {
                            "currntProcedure": {
                                "name": "currntProcedure",
                                "has_default": null,
                                "scope": "GmtDateTime.LoadError",
                                "optional": null,
                                "as_type": "String",
                                "type_hint": null
                            },
                            "errorDescrption": {
                                "name": "errorDescrption",
                                "has_default": null,
                                "scope": "GmtDateTime.LoadError",
                                "optional": true,
                                "as_type": "String",
                                "type_hint": null
                            },
                            "errorNumbr": {
                                "name": "errorNumbr",
                                "has_default": true,
                                "scope": "GmtDateTime.LoadError",
                                "optional": true,
                                "as_type": "GmtDateTimeErrors",
                                "type_hint": null,
                                "default": "-1"
                            }
                        }
                    }
                }
            },
            "attributes": {
                "VB_Name": "\"GmtDateTime\""
            },
            "header": {},
            "config": {},
            "options": {
                "Option Explicit": "Option Explicit"
            }
        }
    }
}
[
    {
        "start": 71,
        "end": 82,
        "scope": "GmtDateTime.GmtDate"
    },
    {
        "start": 95,
        "end": 116,
        "scope": "GmtDateTime.GmtTimeDifference"
    },
    {
        "start": 126,
        "end": 132,
        "scope": "GmtDateTime.GmtDateLocal"
    },
    {
        "start": 151,
        "end": 164,
        "scope": "GmtDateTime.GmtStringToDate"
    },
    {
        "start": 167,
        "end": 176,
        "scope": "GmtDateTime.GmtFormat"
    },
    {
        "start": 180,
        "end": 239,
        "scope": "GmtDateTime.Iso8601TimeToLocalVbTime"
    },
    {
        "start": 241,
        "end": 324,
        "scope": "GmtDateTime.Rfc822TimeToLocalVbTime"
    },
    {
        "start": 337,
        "end": 342,
        "scope": "GmtDateTime.ErrRaise"
    },
    {
        "start": 344,
        "end": 349,
        "scope": "GmtDateTime.ErrorIf"
    },
    {
        "start": 351,
        "end": 367,
        "scope": "GmtDateTime.SaveError"
    },
    {
        "start": 369,
        "end": 375,
        "scope": "GmtDateTime.Blame"
    },
    {
        "start": 377,
        "end": 407,
        "scope": "GmtDateTime.LoadError"
    }
]
